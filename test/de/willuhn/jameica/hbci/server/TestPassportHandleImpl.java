package de.willuhn.jameica.hbci.server;

import javax.xml.bind.DatatypeConverter;

import org.junit.Assert;
import org.junit.Test;
import org.kapott.hbci.manager.QRCode;

import de.willuhn.jameica.hbci.passports.pintan.server.QRDataFromFlickerData;

/**
 * @author Oezguer Emir Testet Flicker -> QR Code Konvertierung.
 */
public class TestPassportHandleImpl
{
  /**
   * @throws Exception
   */
  @Test
  public void testBankauftragAllgemein() throws Exception
  {
    // Bankauftrag allgemein
    StringBuffer flickerData = new StringBuffer("058201100F40");
    byte[] pngData = DatatypeConverter.parseHexBinary(
        "89504E470D0A1A0A0000000D49484452000000940000009401000000005D473D790000011A49444154785ECD95510E84300844B901F7BF656FC0F28076CDFAE76CB25B34DA67527098AAC56D2CFB243F6566E62BACC26BA2318F3CCC3B98A82CEF0EE2FC025BD6311399C5892F305E3B3A7AA231DA72C6A56F4F19E3D2A2E3ABA72CEFF368132D741059F6666D8610D4AC308ADC9AE6D3CAA1B0BCC641954763C6BA63211C507D1358241A8BE7CCCB930AC33797A6970612AB8A0F5A2ACB8BBF3F62DE3D1798659543CA43D52381C52EB5C27B0F0ACC41B37AB549645970094B1882A88CB26DBB0889359627C24EA0B0C6D8824849B4B81ADBB621EA732B32C678F2E450180BF39727F80B544281B1056D3C44DF4B0385F1DEDB435B1791457B88346BE750984FCBCBED2A8B96D29AE05189558FC643C1174364B7F157EC05C496DF94960664530000000049454E44AE426082");

    QRDataFromFlickerData.MakeQRDataFromFlickerData(flickerData);
    String pngString = flickerData.toString();
    final QRCode code = new QRCode(pngString, "Bankauftrag allgemein");

    Assert.assertArrayEquals(pngData, code.getImage());
  }

  /**
   * @throws Exception
   */
  @Test
  public void testHundredBucks() throws Exception
  {
    // Startcode 82112345, Konto/IBAN 0123456789, Überweisung 100 Euro
    StringBuffer flickerData = new StringBuffer("1DC80138323131323334354A30313233343536373839463130302C303002");
    byte[] pngData = DatatypeConverter.parseHexBinary(
        "89504E470D0A1A0A0000000D49484452000000940000009401000000005D473D790000013449444154785ECD96516EC3300C437503DDFF96BA81C747B9C3B0FE850536B929E297C072443A4E9DB798FA4DFE945555F7D06ADC09599FD3B56D3B29538AB3689ACE27D86D9F621A9E36EEA44C8FDD73D4866CDF7579CAACD12B7EEAF69011BD35ADBE1E4A98066D8E9152E3938CF1F82F76B051C8FA30B22F8D79C8106633916A6E0D12A669DA425A833AB62ECFD970B6169727C99331495D2B3A8C9B3226C5AF870434E594B194B942CFCB266472B9DE3566245A8D02C61F534774D5C0391236ABB23DE4B76CC8780FAE83D80356A6841D8CB31EA2A8CE98308D5DCE630F2156C6D6E440E2D639603C36DAB0411129233C55D69F1D95B13BECAE6CB6BF90798F5F0FD9E6BE96308973D641CAD74E18337EE4B86B3065AA44EF27C87A2862AA41B3EDDD0F8794A151E12172A052C8DEE25FB12FE26AE87CBCE9614B0000000049454E44AE426082");

    QRDataFromFlickerData.MakeQRDataFromFlickerData(flickerData);
    String pngString = flickerData.toString();
    final QRCode code = new QRCode(pngString, "Überweisung 100 Euro");

    Assert.assertArrayEquals(pngData, code.getImage());
  }
}
